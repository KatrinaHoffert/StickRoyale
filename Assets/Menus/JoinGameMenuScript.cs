using UnityEngine;
using System.Collections;
using UnityEngine.EventSystems;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using System.Text.RegularExpressions;

public class JoinGameMenuScript : MonoBehaviour
{
    /// <summary>
    /// The text input's object, supplied by Unity.
    /// </summary>
    public InputField hostIpInput;

    private GameObject lastSelectedButton;

    void Start()
    {
        // Similar style to the main game script
        Cursor.visible = false;
        Cursor.lockState = CursorLockMode.Locked;
    }

    void Update()
    {
        if (EventSystem.current.currentSelectedGameObject == null)
        {
            EventSystem.current.SetSelectedGameObject(lastSelectedButton);
        }
        else
        {
            lastSelectedButton = EventSystem.current.currentSelectedGameObject;
        }
    }

    /// <summary>
    /// Called when the "join game" button is pressed.
    /// </summary>
    public void JoinGameButtonDown()
    {
        Debug.Log("Attempting to join game of " + hostIpInput.text);

        if(IsValidIp(hostIpInput.text))
        {
            var ipAndPort = hostIpInput.text.Split(':');
            int port = ipAndPort.Length == 2 ? int.Parse(ipAndPort[1]) : 7777;

            GameObject.Find("NetworkManager").GetComponent<NetworkManagerScript>().ConnectClient(ipAndPort[0], port);
        }
    }

    /// <summary>
    /// Returns whether or not the IP address is valid. Valid IPs should have the form "127.0.0.1:7777", where
    /// there's exactly four period separated segments (with numbers ranging from 0 to 255) and an *optional*
    /// port separated from the IP by a colon.
    /// </summary>
    /// <param name="ip">The IP (and port) address to validate.</param>
    /// <returns>True if valid, false otherwise.</returns>
    private bool IsValidIp(string ip)
    {
        // These are generated by a tool: https://ideone.com/rPhKqb
        // Easier and less error prone than splitting the string and parsing each portion (especially since the integer
        // parsing functionality wants to accept things that aren't decimal integers).
        var regexBetween0And255 = "[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]";
        var regexBetween1And65535 = "[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-5][0-9][0-9][0-9][0-9]|6[0-4][0-9][0-9][0-9]|65[0-4][0-9][0-9]|655[0-2][0-9]|6553[0-5]";
        return Regex.IsMatch(ip, "^(" + regexBetween0And255+ "\\.){3}" + regexBetween0And255 + "(:" + regexBetween1And65535 + ")?$");
    }

    /// <summary>
    /// Called when the "back" button is pressed.
    /// </summary>
	public void BackButtonDown()
    {
        Debug.Log("Back");
        SceneManager.LoadScene("MainMenu");
    }
}
